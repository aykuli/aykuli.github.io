{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "Aynur Shauerman",
  "language": "en",
  "home_page_url": "https://aykuli.github.io/",
  "feed_url": "https://aykuli.github.io/feed/feed.json",
  "description": "I am writing about my experiences as a naval navel-gazer.",
  "author": {
    "name": "Aynur Shauerman",
    "url": ""
  },
  "items": [{
      "id": "https://aykuli.github.io/posts/2022-03-16-docker-network-commands-conspect/",
      "url": "https://aykuli.github.io/posts/2022-03-16-docker-network-commands-conspect/",
      "title": "Adding DNS to New Container",
      "content_html": "<p>Command to see what namespace is used by current machine</p>\n<pre><code>cat /etc/resolve.conf\n</code></pre>\n<details style=\"padding-bottom:10px;margin-bottom: 40px;border-bottom: 1px solid #daeeea\">\n    <summary>Result</summary>\n    <pre style=\"background-color: #daeeea\">\n# This file is managed by man:systemd-resolved(8). Do not edit.\n#\n# This is a dynamic resolv.conf file for connecting local clients to the\n# internal DNS stub resolver of systemd-resolved. This file lists all\n# configured search domains.\n#\n# Run \"resolvectl status\" to see details about the uplink DNS servers\n# currently in use.\n#\n# Third party programs must not access this file directly, but only through the\n# symlink at /etc/resolv.conf. To manage man:resolv.conf(5) in a different way,\n# replace this symlink by a static file or a different symlink.\n#\n# See man:systemd-resolved.service(8) for details about the supported modes of\n# operation for /etc/resolv.conf.\nnameserver 127.0.0.53\noptions edns0 trust-ad\n    </pre>\n</details>\n<p>Adding DNS of Google to new container</p>\n<pre><code>docker run --name node8 -d --dns 8.8.8.8 demo-3\ndocker exec -it node8 sh\n/opt/app# cat /etc/resolv.conf\n</code></pre>\n<details style=\"padding-bottom:10px;\">\n    <summary>Result</summary>\n    <pre style=\"background-color: #daeeea\">\nnameserver 8.8.8.8\n    </pre>\n</details>\n",
      "date_published": "2022-03-16T00:00:00Z"
    },{
      "id": "https://aykuli.github.io/posts/2022-03-15-docker-network-commands-conspect/",
      "url": "https://aykuli.github.io/posts/2022-03-15-docker-network-commands-conspect/",
      "title": "Dockerfile Network Commands Conspect",
      "content_html": "<h3 id=\"network-drivers\" tabindex=\"-1\">Network drivers <a class=\"direct-link\" href=\"https://aykuli.github.io/posts/2022-03-15-docker-network-commands-conspect/#network-drivers\" aria-hidden=\"true\">#</a></h3>\n<p><code>bridge</code> - isolated network between containers. Works only in one host.</p>\n<p><code>host</code> - remove network isolation between the container</p>\n<p><code>overlay</code> - Docker swarm</p>\n<p><code>macvlan</code> - unique MAC address from container</p>\n<p><code>null</code> - container without network</p>\n<h3 id=\"commands\" tabindex=\"-1\">Commands <a class=\"direct-link\" href=\"https://aykuli.github.io/posts/2022-03-15-docker-network-commands-conspect/#commands\" aria-hidden=\"true\">#</a></h3>\n<pre><code>connect\ncreate\ndiconnect\ninspect\nls\nrm\nprune\n</code></pre>\n<h4 id=\"examples\" tabindex=\"-1\">Examples <a class=\"direct-link\" href=\"https://aykuli.github.io/posts/2022-03-15-docker-network-commands-conspect/#examples\" aria-hidden=\"true\">#</a></h4>\n<pre><code>docker network ls\n</code></pre>\n<details style=\"padding-bottom:10px;margin-bottom: 40px;border-bottom: 1px solid #daeeea\">\n<summary>Result</summary>\n<pre style=\"background-color: #daeeea\">\nNETWORK ID     NAME          DRIVER    SCOPE\n8177523a8087   ayn-network   bridge    local\n19588a186fed   bridge        bridge    local\n5450493e59b7   host          host      local\nfa699046eb10   none          null      local\n</pre>\n</details>\n<pre><code>docker network inspect bridge\n</code></pre>\n<details style=\"padding-bottom:10px;margin-bottom: 40px;border-bottom: 1px solid #daeeea\">\n<summary>Result</summary>\n<pre style=\"background-color: #daeeea\">\n[\n    {\n        \"Name\": \"bridge\",\n        \"Id\": \"19588a186fed23412c698e7bd0fc8cc7b97bc8f3b2123784fe6d30845c3784d9\",\n        \"Created\": \"2022-03-15T15:01:03.274362572Z\",\n        \"Scope\": \"local\",\n        \"Driver\": \"bridge\",\n        \"EnableIPv6\": false,\n        \"IPAM\": {\n            \"Driver\": \"default\",\n            \"Options\": null,\n            \"Config\": [\n                {\n                    \"Subnet\": \"172.17.0.0/16\",\n                    \"Gateway\": \"172.17.0.1\"\n                }\n            ]\n        },\n        \"Internal\": false,\n        \"Attachable\": false,\n        \"Ingress\": false,\n        \"ConfigFrom\": {\n            \"Network\": \"\"\n        },\n        \"ConfigOnly\": false,\n        <div style=\"background-color: #FEE\">\n        \"Containers\": {\n            \"480849852ab9df8156166f5e821e6f2a72195abffc9809dd0958167cc71779ff\": {\n                \"Name\": \"node1\",\n                \"EndpointID\": \"7e76de9eda40652eea458cbbbde534b413de5da354b96e3d2d8199eccea31e4c\",\n                \"MacAddress\": \"02:42:ac:11:00:03\",\n                \"IPv4Address\": \"172.17.0.3/16\",\n                \"IPv6Address\": \"\"\n            },\n            \"88f61bcb695ca7647916b07f5dc6bbaaec51e0181e11cada99cdf8c0912bcbb5\": {\n                \"Name\": \"stupefied_chatterjee\",\n                \"EndpointID\": \"8b71507e712adda9d535187e82b488df3d9731bab87cd61a56365752434e70a0\",\n                \"MacAddress\": \"02:42:ac:11:00:02\",\n                \"IPv4Address\": \"172.17.0.2/16\",\n                \"IPv6Address\": \"\"\n            },\n            \"abde5f3677d0b97987ab265c5de6b35b3be2db79a0cd10c612f98b30c8971641\": {\n                \"Name\": \"node2\",\n                \"EndpointID\": \"6a5cae843b651c20b8cfe83b6d6c8b78b830d85c14e114502496a05960e68e74\",\n                \"MacAddress\": \"02:42:ac:11:00:04\",\n                \"IPv4Address\": \"172.17.0.4/16\",\n                \"IPv6Address\": \"\"\n            },\n            \"ed6a0c472ad8c00b33cfec7de1775fd8c7bfaec1fdfa3241aab5f155397d01b2\": {\n                \"Name\": \"node3\",\n                \"EndpointID\": \"31e2b0ac774eda44afbc82f772dbcb6cbbd6ac12742f79271898f9c6ac7dc5bf\",\n                \"MacAddress\": \"02:42:ac:11:00:05\",\n                \"IPv4Address\": \"172.17.0.5/16\",\n                \"IPv6Address\": \"\"\n            }\n        },\n        </div>\n        \"Options\": {\n            \"com.docker.network.bridge.default_bridge\": \"true\",\n            \"com.docker.network.bridge.enable_icc\": \"true\",\n            \"com.docker.network.bridge.enable_ip_masquerade\": \"true\",\n            \"com.docker.network.bridge.host_binding_ipv4\": \"0.0.0.0\",\n            \"com.docker.network.bridge.name\": \"docker0\",\n            \"com.docker.network.driver.mtu\": \"1500\"\n        },\n        \"Labels\": {}\n    }\n]\n</pre>\n</details>\n<pre><code>docker create ayn-network\ndocker network ls\n</code></pre>\n<details style=\"padding-bottom:10px;margin-bottom: 40px;border-bottom: 1px solid #daeeea\">\n<summary>Result</summary>\n<pre style=\"background-color: #daeeea\">\nNETWORK ID     NAME          DRIVER    SCOPE\n8177523a8087   ayn-network   bridge    local\n19588a186fed   bridge        bridge    local\n5450493e59b7   host          host      local\nfa699046eb10   none          null      local\n</pre>\n</details>\n<pre><code>docker connect ayn-network node1\ndocker connect ayn-network node2\ndocker network inspect\n</code></pre>\n<details style=\"padding-bottom:10px;margin-bottom: 40px;border-bottom: 1px solid #daeeea\">\n<summary>Result</summary>\n<pre style=\"background-color: #daeeea\">\n[\n    {\n        \"Name\": \"ayn-network\",\n        \"Id\": \"8177523a808757893a0f240da2c3ab78f77ea16d166f41687627c893eb4f10ce\",\n        \"Created\": \"2022-03-15T15:54:47.29301923Z\",\n        \"Scope\": \"local\",\n        \"Driver\": \"bridge\",\n        \"EnableIPv6\": false,\n        \"IPAM\": {\n            \"Driver\": \"default\",\n            \"Options\": {},\n            \"Config\": [\n                {\n                    \"Subnet\": \"172.18.0.0/16\",\n                    \"Gateway\": \"172.18.0.1\"\n                }\n            ]\n        },\n        \"Internal\": false,\n        \"Attachable\": false,\n        \"Ingress\": false,\n        \"ConfigFrom\": {\n            \"Network\": \"\"\n        },\n        \"ConfigOnly\": false,\n        <div style=\"background-color: #FEE\">\n        \"Containers\": {\n            \"480849852ab9df8156166f5e821e6f2a72195abffc9809dd0958167cc71779ff\": {\n                \"Name\": \"node1\",\n                \"EndpointID\": \"e0750851f2ed267ae5bf8ad20c236d6165e7f58ed85f7b58b2518b66bc2e5fd5\",\n                \"MacAddress\": \"02:42:ac:12:00:02\",\n                \"IPv4Address\": \"172.18.0.2/16\",\n                \"IPv6Address\": \"\"\n            },\n            \"abde5f3677d0b97987ab265c5de6b35b3be2db79a0cd10c612f98b30c8971641\": {\n                \"Name\": \"node2\",\n                \"EndpointID\": \"dae5e0b3b0995f830a4f837e3431b929ba9c267eb604be2bd05ea238285d9396\",\n                \"MacAddress\": \"02:42:ac:12:00:03\",\n                \"IPv4Address\": \"172.18.0.3/16\",\n                \"IPv6Address\": \"\"\n            }\n        },\n        </div>\n        \"Options\": {},\n        \"Labels\": {}\n    }\n]\n</pre>\n</details>\n<pre><code>docker run --name=node3 --network ayn-network -p 3001:3000 -d demo:latest\ncurl localhost:3001\n</code></pre>\n<p>This container exits in <code>ayn-network</code> only and doesn't exist in <code>bridge</code>. Port 3001 on host shows port 3000 of container with name node3</p>\n<details style=\"padding-bottom:10px\">\n<summary>Result</summary>\n<pre style=\"background-color: #daeeea\">\n{\"eth0\":[\"172.18.0.5\"]}\n</pre>\n</details>\n",
      "date_published": "2022-03-15T00:00:00Z"
    },{
      "id": "https://aykuli.github.io/posts/2022-03-14-how-to-delete-line-in-nano-editor/",
      "url": "https://aykuli.github.io/posts/2022-03-14-how-to-delete-line-in-nano-editor/",
      "title": "Delete Line in Nano Editor",
      "content_html": "<p>Just <code>Ctrl + K</code>. Step by step.</p>\n<p>Or</p>\n<ol>\n<li>Press <code>CTRL + Shift + 6</code> to mark the start of your block</li>\n<li>Shift the cursor to the end of the block with the arrow keys, and it will outline the text.</li>\n<li>Press CTRL + K to cut/delete a block and it will remove a line in nano.</li>\n</ol>\n<p><img src=\"https://aykuli.github.io/img/posts/2022-03-14-how-to-delete-line-in-nano-editor.png\" alt=\"img\" /></p>\n<h3 id=\"sources\" tabindex=\"-1\">Sources <a class=\"direct-link\" href=\"https://aykuli.github.io/posts/2022-03-14-how-to-delete-line-in-nano-editor/#sources\" aria-hidden=\"true\">#</a></h3>\n<ul>\n<li><a href=\"https://monovm.com/blog/how-to-delete-line-in-nano-delete-all/\">https://monovm.com/blog/how-to-delete-line-in-nano-delete-all/</a></li>\n</ul>\n",
      "date_published": "2022-03-14T00:00:00Z"
    },{
      "id": "https://aykuli.github.io/posts/2022-03-14-docker-commands-conspect/",
      "url": "https://aykuli.github.io/posts/2022-03-14-docker-commands-conspect/",
      "title": "Dockerfile Commands Resume",
      "content_html": "<p>Every line will be layer. The less lines in Dockerfile is better.</p>\n<p><code>Context</code> - folder containing Dockerfile</p>\n<p><code>.dockerignore</code> - ignoring folders/files</p>\n<hr />\n<pre class=\"language-docker\"><code class=\"language-docker\"><span class=\"token instruction\"><span class=\"token keyword\">ARG</span> CODE_VERSION=latest</span><br /><br /><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> node:14-alpine <span class=\"token keyword\">as</span> build</span><br /><br /><span class=\"token instruction\"><span class=\"token keyword\">LABEL</span> version=<span class=\"token string\">\"1.0\"</span></span><br /><br /><span class=\"token instruction\"><span class=\"token keyword\">USER</span> root</span><br /><span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> /opt/app</span><br /><br /><span class=\"token instruction\"><span class=\"token keyword\">ADD</span> *.json ./</span><br /><span class=\"token instruction\"><span class=\"token keyword\">ADD</span> <span class=\"token options\"><span class=\"token property\">--chown</span><span class=\"token punctuation\">=</span><span class=\"token string\">root</span></span> files* /somedir/</span><br /><span class=\"token instruction\"><span class=\"token keyword\">ADD</span> archive.tar.gz /somedir/</span><br /><span class=\"token instruction\"><span class=\"token keyword\">ADD</span> http://link.com/some.tar.gz /somedir/</span><br /><span class=\"token instruction\"><span class=\"token keyword\">COPY</span> *.json ./</span><br /></code></pre>\n<p><code>ARG</code> - arguments that used only while building, but it doesn't exist in result image<br />\n<code>FROM</code> - every Dockerfile shpuld have it<br />\n<code>LABEL</code> - some meta information<br />\n<code>WORKDIR</code> - working directory<br />\n<code>ADD</code> - copy from host machine (first argument) into container folder(second argument). Can work with archives, urls, make permissions for exact user, <code>COPY</code> can't do that.<br />\n<code>COPY</code> - allows to copy from local machine and from previos images while multistage building</p>\n<hr />\n<pre class=\"language-docker\"><code class=\"language-docker\"><span class=\"token comment\"># comment line</span><br /><span class=\"token instruction\"><span class=\"token keyword\">SHELL</span> [<span class=\"token string\">\"/bin/sh\"</span>, \"-c]</span><br /><span class=\"token instruction\"><span class=\"token keyword\">RUN</span> echo hello</span><br /><br /><span class=\"token instruction\"><span class=\"token keyword\">ENV</span> FOO = 1</span><br /><span class=\"token instruction\"><span class=\"token keyword\">ENV</span> BAR=<span class=\"token variable\">$FOO</span></span><br /><span class=\"token instruction\"><span class=\"token keyword\">RUN</span> DEBIAN_FRONTEND=noninteractive apt-get update &amp;&amp; apt-get install -y</span><br /><br /><span class=\"token instruction\"><span class=\"token keyword\">ENTRYPOINT</span> [<span class=\"token string\">\"top\"</span>, <span class=\"token string\">\"-c\"</span>]</span><br /><span class=\"token instruction\"><span class=\"token keyword\">CMD</span> [<span class=\"token string\">\"node\"</span>,<span class=\"token string\">\"./dist/apps/api/main.js\"</span>]</span><br /><span class=\"token instruction\"><span class=\"token keyword\">CMD</span> node ./dist/apps/api/main.js</span><br /><span class=\"token instruction\"><span class=\"token keyword\">EXPOSE</span> 80/tcp</span></code></pre>\n<p><code>SHELL</code> - allows to select what shell will be used inside container. <code>/bin/sh</code> - default shell<br />\n<code>RUN</code> - runs shell commands<br />\n<code>ENV</code> - environment variables that will be saved inside container<br />\n<code>EXPOSE</code> - documeantaion for developer about used ports<br />\n<code>ENTRYPOINT</code> - command gets executed when running a container<br />\n<code>CMD</code> - does the same as <code>ENTRYPOINT</code>, difference is</p>\n<ul>\n<li>\n<p>Dockerfile should specify at least one of <code>CMD</code> or <code>ENTRYPOINT</code> commands.</p>\n</li>\n<li>\n<p><code>ENTRYPOINT</code> has more precedence than <code>CMD</code></p>\n</li>\n<li>\n<p><code>ENTRYPOINT</code> should be defined when using the container as an executable.</p>\n</li>\n<li>\n<p><code>CMD</code> should be used as a way of defining default arguments for an <code>ENTRYPOINT</code> command or for executing an ad-hoc command in a container.</p>\n</li>\n<li>\n<p><code>CMD</code> will be overridden when running the container with alternative arguments.[^1]</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>No ENTRYPOINT</th>\n<th>ENTRYPOINT exec_entry p1_entry</th>\n<th>ENTRYPOINT [“exec_entry”, “p1_entry”]</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>No CMD</td>\n<td>error, not allowed</td>\n<td><code>/bin/sh -c exec_entry p1_entry</code></td>\n<td><code>exec_entry p1_entry</code></td>\n</tr>\n<tr>\n<td><code>CMD [“exec_cmd”, “p1_cmd”]</code></td>\n<td><code>exec_cmd p1_cmd</code></td>\n<td><code>/bin/sh -c exec_entry p1_entry</code></td>\n<td><code>exec_entry p1_entry exec_cmd p1_cmd</code></td>\n</tr>\n<tr>\n<td><code>CMD [“p1_cmd”, “p2_cmd”]</code></td>\n<td><code>p1_cmd p2_cmd</code></td>\n<td><code>/bin/sh -c exec_entry p1_entry</code></td>\n<td><code>exec_entry p1_entry p1_cmd p2_cmd</code></td>\n</tr>\n<tr>\n<td><code>CMD exec_cmd p1</code></td>\n<td><code>\\_cmd /bin/sh -c exec_cmd p1_cmd</code></td>\n<td><code>/bin/sh -c exec_entry p1_entry</code></td>\n<td><code>exec_entry p1_entry /bin/sh -c exec_cmd p1_cmd</code></td>\n</tr>\n</tbody>\n</table>\n<p>[^1]: <a href=\"https://docs.docker.com/engine/reference/builder/#entrypoint\">Understand how CMD and ENTRYPOINT interact</a></p>\n",
      "date_published": "2022-03-14T00:00:00Z"
    },{
      "id": "https://aykuli.github.io/posts/2022-03-13-linux-commands/",
      "url": "https://aykuli.github.io/posts/2022-03-13-linux-commands/",
      "title": "Frequently used Linux Commands",
      "content_html": "<ul>\n<li>\n<p><code>pwd</code> - current directory</p>\n</li>\n<li>\n<p><code>ls -al</code> - list of fileas and directi=ories in folder</p>\n</li>\n<li>\n<p><code>rm file_or_dir_name</code> - remove</p>\n</li>\n<li>\n<p><code>cp file1 file2</code> - copy content of file1 to file2</p>\n</li>\n<li>\n<p><code>tail -N</code> - see last N lines in file</p>\n</li>\n<li>\n<p><code>head -N</code> - see first N lines in file</p>\n</li>\n<li>\n<p><code>less filename</code> - see content of file</p>\n</li>\n<li>\n<p><code>cat package.json | grep &quot;@11ty/&quot;</code> - see lines which contain string <code>@11ty/</code></p>\n</li>\n</ul>\n<p>result:</p>\n<pre><code>    &quot;@11ty/eleventy&quot;: &quot;^1.0.0&quot;,\n    &quot;@11ty/eleventy-navigation&quot;: &quot;^0.3.2&quot;,\n    &quot;@11ty/eleventy-plugin-rss&quot;: &quot;^1.1.2&quot;,\n    &quot;@11ty/eleventy-plugin-syntaxhighlight&quot;: &quot;^3.1.3&quot;,\n</code></pre>\n<ul>\n<li><code>cat package.json | head -3</code> - see first 3 lines in file</li>\n</ul>\n<p>result:</p>\n<pre><code>{\n  &quot;name&quot;: &quot;Aynur Shuaerman's notes&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n</code></pre>\n<ul>\n<li>\n<p><code>find . -name index</code> - find in current folder files containing string <code>index</code></p>\n</li>\n<li>\n<p><code>diff posts/2022-03-13-linux-commands/index.md posts/2022-01-30-ubuntu-install-list.md</code> - difference between this files</p>\n</li>\n<li>\n<p><code>df</code> - disk space information</p>\n</li>\n</ul>\n",
      "date_published": "2022-03-03T00:00:00Z"
    },{
      "id": "https://aykuli.github.io/posts/2022-01-30-ubuntu-install-list/",
      "url": "https://aykuli.github.io/posts/2022-01-30-ubuntu-install-list/",
      "title": "My List of Apps to Install on Ubuntu",
      "content_html": "<p>List of applications, that I use for the last 6 years:</p>\n<ul>\n<li>git</li>\n<li>nodejs</li>\n<li>vscode</li>\n<li>npm</li>\n<li>yarn</li>\n<li>docker</li>\n<li>chrome-browser</li>\n<li>opera</li>\n<li>gimp</li>\n<li>kazam</li>\n<li>zoom</li>\n<li>nemo</li>\n<li>obs</li>\n<li>deepin-screenshot</li>\n</ul>\n",
      "date_published": "2022-01-31T00:00:00Z"
    }
  ]
}
